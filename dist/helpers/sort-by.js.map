{"version":3,"file":"sort-by.js","sources":["../../src/helpers/sort-by.js"],"sourcesContent":["import { get } from '@ember/object';\nimport { isEmpty } from '@ember/utils';\nimport { helper } from '@ember/component/helper';\nimport asArray from '../utils/as-array';\n\nconst collator = new Intl.Collator(undefined, {\n  sensitivity: 'base'\n});\n\nfunction normalizeToBoolean(val) {\n  if (typeof val === 'boolean') {\n    return val;\n  }\n\n  if (typeof val === 'number') {\n    if (val > 0) {\n      return false;\n    } else if (val < 0) {\n      return true;\n    }\n  }\n\n  return val;\n}\n\nfunction safeValueForKey(ctx, key) {\n  if (ctx === null || ctx === undefined) {\n    return ctx;\n  }\n  return get(ctx, key);\n}\n\nfunction sortDesc(key, a, b) {\n  if (isEmpty(key)) {\n    return 0;\n  }\n\n  const aValue = safeValueForKey(a, key);\n  const bValue = safeValueForKey(b, key);\n\n  const isANullable = typeof aValue == 'undefined' || aValue === null;\n  const isBNullable = typeof bValue == 'undefined' || bValue === null;\n\n  if (isANullable && isBNullable) {\n    //both values are nullable\n    return 0;\n  }\n\n  if (isBNullable) {\n    // keep bValue last\n    return -1;\n  }\n  if (isANullable) {\n    // put aValue last\n    return 1;\n  }\n\n  if (aValue.toLowerCase && bValue.toLowerCase) {\n    return collator.compare(bValue, aValue);\n  }\n\n  if (aValue < bValue) {\n    return 1\n  } else if (aValue > bValue) {\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction sortAsc(key, a, b) {\n  if (isEmpty(key)) {\n    return 0;\n  }\n\n  const aValue = safeValueForKey(a, key);\n  const bValue = safeValueForKey(b, key);\n\n  const isANullable = typeof aValue == 'undefined' || aValue === null;\n  const isBNullable = typeof bValue == 'undefined' || bValue === null;\n\n  if (isANullable && isBNullable) {\n    //both values are nullable\n    return 0;\n  }\n\n  if (isBNullable) {\n    // keep bValue last\n    return -1;\n  }\n  if (isANullable) {\n    // put aValue last\n    return 1;\n  }\n\n  if (aValue.toLowerCase && bValue.toLowerCase) {\n    return collator.compare(aValue, bValue);\n  }\n\n  if (aValue < bValue) {\n    return -1\n  } else if (aValue > bValue) {\n    return 1;\n  }\n\n  return 0;\n}\n\nclass SortBy {\n  constructor(...args) {\n    let [array] = args;\n    if (typeof array.toArray === \"function\") {\n      array = array.toArray();\n    }\n\n    this.array = [...array];\n  }\n\n  comparator(key) {\n    return (typeof key === 'function') ? key : this.defaultSort(key);\n  }\n\n  defaultSort(sortKey) {\n    let func = sortAsc;\n    if (sortKey.match(':desc')) {\n      func = sortDesc;\n    }\n\n    return (a, b) => func(sortKey.replace(/:desc|:asc/, ''), a, b);\n  }\n}\n\n/**\n * best O(n); worst O(n^2)\n * If we feel like swapping with something more performant like QuickSort or MergeSort\n * then it should be easy\n *\n * @class BubbleSort\n * @extends SortBy\n */\nclass BubbleSort extends SortBy {\n  perform(keys = []) {\n    let swapped = false;\n\n    let compFuncs = keys.map(key => this.comparator(key));\n    let compFunc = (a, b) => {\n      for (let i = 0; i < compFuncs.length; i += 1) {\n        let result = compFuncs[i](a,b);\n        if (result === 0) {\n          continue;\n        }\n        return result;\n      }\n      return 0;\n    };\n    for (let i = 1; i < this.array.length; i += 1) {\n      for (let j = 0; j < this.array.length - i; j += 1) {\n        let shouldSwap = normalizeToBoolean(compFunc(this.array[j+1], this.array[j]));\n        if (shouldSwap) {\n          [this.array[j], this.array[j+1]] = [this.array[j+1], this.array[j]];\n\n          swapped = true;\n        }\n      }\n\n      // no need to continue sort if not swapped in any inner iteration\n      if (!swapped) {\n        return this.array;\n      }\n    }\n  }\n}\n\nexport function sortBy(params) {\n  // slice params to avoid mutating the provided params\n  let sortParams = params.slice();\n  let array = asArray(sortParams.pop());\n  let sortKeys = sortParams;\n\n  if (!array || (!sortKeys || sortKeys.length === 0)) {\n    return [];\n  }\n\n  if (sortKeys.length === 1 && Array.isArray(sortKeys[0])) {\n    sortKeys = sortKeys[0];\n  }\n\n  const sortKlass = new BubbleSort(array);\n  sortKlass.perform(sortKeys);\n  return sortKlass.array;\n}\n\nexport default helper(sortBy);\n"],"names":["collator","Intl","Collator","undefined","sensitivity","normalizeToBoolean","val","safeValueForKey","ctx","key","get","sortDesc","a","b","isEmpty","aValue","bValue","isANullable","isBNullable","toLowerCase","compare","sortAsc","SortBy","constructor","args","array","toArray","comparator","defaultSort","sortKey","func","match","replace","BubbleSort","perform","keys","swapped","compFuncs","map","compFunc","i","length","result","j","shouldSwap","sortBy","params","sortParams","slice","asArray","pop","sortKeys","Array","isArray","sortKlass","helper"],"mappings":"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"}