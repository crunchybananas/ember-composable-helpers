{"version":3,"file":"chunk.js","sources":["../../src/helpers/chunk.js"],"sourcesContent":["import { helper } from '@ember/component/helper';\nimport { isArray as isEmberArray } from '@ember/array';\nconst { max, ceil } = Math;\nimport asArray from '../utils/as-array';\n\nexport function chunk(num, array) {\n  let integer = parseInt(num, 10);\n  let size = max(integer, 0);\n\n  let length = 0;\n  if (isEmberArray(array)) {\n    length = array.length;\n  }\n\n  array = asArray(array)\n\n  if (!length || size < 1) {\n    return [];\n  } else {\n    let index = 0;\n    let resultIndex = -1;\n    let result = new Array(ceil(length / size));\n\n    while (index < length) {\n      result[++resultIndex] = array.slice(index, (index += size));\n    }\n\n    return result;\n  }\n}\n\nexport default helper(function([num, array]) {\n  return chunk(num, array);\n});\n"],"names":["max","ceil","Math","chunk","num","array","integer","parseInt","size","length","isEmberArray","asArray","index","resultIndex","result","Array","slice","helper"],"mappings":";;;;AAEA,MAAM;EAAEA,GAAG;AAAEC,EAAAA,IAAAA;AAAK,CAAC,GAAGC,IAAI,CAAA;AAGnB,SAASC,KAAKA,CAACC,GAAG,EAAEC,KAAK,EAAE;AAChC,EAAA,IAAIC,OAAO,GAAGC,QAAQ,CAACH,GAAG,EAAE,EAAE,CAAC,CAAA;AAC/B,EAAA,IAAII,IAAI,GAAGR,GAAG,CAACM,OAAO,EAAE,CAAC,CAAC,CAAA;EAE1B,IAAIG,MAAM,GAAG,CAAC,CAAA;AACd,EAAA,IAAIC,OAAY,CAACL,KAAK,CAAC,EAAE;IACvBI,MAAM,GAAGJ,KAAK,CAACI,MAAM,CAAA;AACvB,GAAA;AAEAJ,EAAAA,KAAK,GAAGM,OAAO,CAACN,KAAK,CAAC,CAAA;AAEtB,EAAA,IAAI,CAACI,MAAM,IAAID,IAAI,GAAG,CAAC,EAAE;AACvB,IAAA,OAAO,EAAE,CAAA;AACX,GAAC,MAAM;IACL,IAAII,KAAK,GAAG,CAAC,CAAA;IACb,IAAIC,WAAW,GAAG,CAAC,CAAC,CAAA;IACpB,IAAIC,MAAM,GAAG,IAAIC,KAAK,CAACd,IAAI,CAACQ,MAAM,GAAGD,IAAI,CAAC,CAAC,CAAA;IAE3C,OAAOI,KAAK,GAAGH,MAAM,EAAE;AACrBK,MAAAA,MAAM,CAAC,EAAED,WAAW,CAAC,GAAGR,KAAK,CAACW,KAAK,CAACJ,KAAK,EAAGA,KAAK,IAAIJ,IAAK,CAAC,CAAA;AAC7D,KAAA;AAEA,IAAA,OAAOM,MAAM,CAAA;AACf,GAAA;AACF,CAAA;AAEA,cAAeG,MAAM,CAAC,UAAS,CAACb,GAAG,EAAEC,KAAK,CAAC,EAAE;AAC3C,EAAA,OAAOF,KAAK,CAACC,GAAG,EAAEC,KAAK,CAAC,CAAA;AAC1B,CAAC,CAAC;;;;"}